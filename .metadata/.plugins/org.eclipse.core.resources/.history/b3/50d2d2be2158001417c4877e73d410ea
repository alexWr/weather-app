package com.example.openweathert;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.ProgressDialog;
import android.app.SearchManager;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.view.MenuItemCompat;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.widget.SearchView;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.widget.TextView;

public class MainActivity extends ActionBarActivity {	
	String responseGeo=null;
	SearchView svCity;
	MenuItem searchItem;
	String name; 
	SearchManager searchManager;
	double lon,lat;	
	TextView tvWeather,tvTemp,tvDay1,tvDay2,tvDay3,tvDay4;
	String city,responseString=null,responseString5=null,citySave;
	int humid,temp;
	SharedPreferences sPref;	
	ArrayList<Integer> humid5=new ArrayList<Integer>();
	ArrayList<Integer> temp5=new ArrayList<Integer>();
	GPSTracker gps;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);               
        tvWeather=(TextView)findViewById(R.id.tvWeather);
        tvDay1=(TextView)findViewById(R.id.tvDay1);
        tvDay2=(TextView)findViewById(R.id.tvDay2);
        tvDay3=(TextView)findViewById(R.id.tvDay3);
        tvDay4=(TextView)findViewById(R.id.tvDay4);
        tvTemp=(TextView)findViewById(R.id.tvTemp);
        loadCity();
        gps=new GPSTracker(this);
    }
    @Override
   
    public boolean onCreateOptionsMenu(Menu menu) {
    	MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.activity_main_action, menu);
        searchManager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);
        searchItem = menu.findItem(R.id.action_search);        
        svCity=(SearchView)MenuItemCompat.getActionView(searchItem);        
        if (null != svCity) {        	
        	svCity.setSearchableInfo(searchManager
                    .getSearchableInfo(getComponentName()));
        	svCity.setIconifiedByDefault(false);
        }
        svCity.onActionViewCollapsed();
        SearchView.OnQueryTextListener queryTextListener = new SearchView.OnQueryTextListener() {
            public boolean onQueryTextChange(String newText) {
                name=newText;                              
                return false;
            }
            public boolean onQueryTextSubmit(String query) {
            	 name=query;
            	 svCity.onActionViewCollapsed();
            	 saveCity();
            	return false;
            }            
        };
        svCity.setOnQueryTextListener(queryTextListener);
        return super.onCreateOptionsMenu(menu);
    }
    @Override
   public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        switch(item.getItemId()){
        	case R.id.action_search:        	
        		return true;
        	case R.id.action_settings:         	
        		return true;        
        	case R.id.action_show_weather:
        		saveCity();
        		new RequestTask().execute("http://api.openweathermap.org/data/2.5/weather?q="+name);
        		return true;
        	case R.id.action_show_weather5:
        		new RequestTask5().execute("http://api.openweathermap.org/data/2.5/forecast/daily?q="+
        		name+"&mode=json&units=metric&cnt=5");
        		return true;
        	case R.id.action_geo:
        		if(gps.canGetLocation()){                
                    lat=gps.getLatitude();
                    lon=gps.getLongitude();
            	}
            	new RequestTaskGeo().execute("http://api.openweathermap.org/data/2.5/forecast/daily?lat="+
            	lat+"&lon="+lon+"&cnt=5&mode=json");
            	Log.d("myLogs",lat+" "+lon);
            	return true;
        }
        
        return super.onOptionsItemSelected(item);
    }    
    void saveCity() {
    	sPref = getPreferences(MODE_PRIVATE);
        Editor ed = sPref.edit();
        ed.putString(citySave, name);
        ed.commit();         
      }
    void loadCity() {
    	sPref = getPreferences(MODE_PRIVATE);
        name = sPref.getString(citySave, "");
        new RequestTask().execute("http://api.openweathermap.org/data/2.5/weather?q="+name);
      }
    class RequestTask extends AsyncTask<String, String, String>{
    	ProgressDialog progressDialog;
	    @Override
	    protected void onPreExecute()
	    {
	        progressDialog= ProgressDialog.show(MainActivity.this, "Download","Getting data", true);    	                         	        
	    };      
        @Override
        protected String doInBackground(String... uri) {
            HttpClient httpclient = new DefaultHttpClient();
            HttpResponse response;            
            try {
                response = httpclient.execute(new HttpGet(uri[0]));
                StatusLine statusLine = response.getStatusLine();
                if(statusLine.getStatusCode() == HttpStatus.SC_OK){
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    response.getEntity().writeTo(out);
                    out.close();
                    responseString = out.toString();                    
                    parseData(responseString);                    
                } else{
                    //Closes the connection.
                    response.getEntity().getContent().close();
                    throw new IOException(statusLine.getReasonPhrase());
                }
            } 
            catch (Exception e) {               
            }
            return responseString;
        }
        
        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);
            tvTemp.setTextSize(35);
            tvTemp.setText(temp+"^C\n");
            tvWeather.setTextSize(10);
            tvWeather.setText(humid+"%\n"+city);
            progressDialog.dismiss();
        }
    }
    
    class RequestTask5 extends AsyncTask<String, String, String>{
    	ProgressDialog progressDialog;
	    @Override
	    protected void onPreExecute()
	    {
	        progressDialog= ProgressDialog.show(MainActivity.this, "Download","Getting data", true);    	                         	        
	    };      
        @Override
        protected String doInBackground(String... uri) {
            HttpClient httpclient = new DefaultHttpClient();
            HttpResponse response;            
            try {
                response = httpclient.execute(new HttpGet(uri[0]));
                StatusLine statusLine = response.getStatusLine();
                if(statusLine.getStatusCode() == HttpStatus.SC_OK){
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    response.getEntity().writeTo(out);
                    out.close();
                    responseString5 = out.toString();                    
                    parseData5(responseString5);                    
                } else{
                    //Closes the connection.
                    response.getEntity().getContent().close();
                    throw new IOException(statusLine.getReasonPhrase());
                }
            } 
            catch (Exception e) {               
            }
            return responseString5;
        }
        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);            
            tvTemp.setTextSize(35);
            tvTemp.setText(temp5.get(0)+"^C\n");
            tvWeather.setTextSize(10);
            tvWeather.setText(humid5.get(0)+"%\n"+city);
            tvDay1.setTextSize(10);
            tvDay2.setTextSize(10);
            tvDay3.setTextSize(10);
            tvDay4.setTextSize(10);
            tvDay1.setText(temp5.get(1)+"^C\n"+humid5.get(1)+"%");
            tvDay2.setText(temp5.get(2)+"^C\n"+humid5.get(2)+"%");
            tvDay3.setText(temp5.get(3)+"^C\n"+humid5.get(3)+"%");
            tvDay4.setText(temp5.get(4)+"^C\n"+humid5.get(4)+"%");
            progressDialog.dismiss();
        }
    }
    class RequestTaskGeo extends AsyncTask<String, String, String>{
    	ProgressDialog progressDialog;
	    @Override
	    protected void onPreExecute()
	    {
	        progressDialog= ProgressDialog.show(MainActivity.this, "Download","Getting data", true);    	                         	        
	    };      
        @Override
        protected String doInBackground(String... uri) {
            HttpClient httpclient = new DefaultHttpClient();
            HttpResponse response;            
            try {
                response = httpclient.execute(new HttpGet(uri[0]));
                StatusLine statusLine = response.getStatusLine();
                if(statusLine.getStatusCode() == HttpStatus.SC_OK){
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    response.getEntity().writeTo(out);
                    out.close();
                    responseGeo = out.toString();                   
                    parseDataGeo(responseGeo);                   
                } else{
                    //Closes the connection.
                    response.getEntity().getContent().close();
                    throw new IOException(statusLine.getReasonPhrase());
                }
            } 
            catch (Exception e) {               
            }
            return responseGeo;
        }
        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);            
            tvTemp.setTextSize(35);
            tvTemp.setText(temp5.get(0)+"^C\n");
            tvWeather.setTextSize(10);
            tvWeather.setText(humid5.get(0)+"%\n"+city);
            tvDay1.setTextSize(10);
            tvDay2.setTextSize(10);
            tvDay3.setTextSize(10);
            tvDay4.setTextSize(10);
            tvDay1.setText(temp5.get(1)+"^C\n"+humid5.get(1)+"%");
            tvDay2.setText(temp5.get(2)+"^C\n"+humid5.get(2)+"%");
            tvDay3.setText(temp5.get(3)+"^C\n"+humid5.get(3)+"%");
            tvDay4.setText(temp5.get(4)+"^C\n"+humid5.get(4)+"%");
            progressDialog.dismiss();
        }
    }
    void parseData(String data) throws JSONException {    	        
    	JSONObject json_array=new JSONObject(data);    
    	for(int i=0; i<json_array.length();i++){    		
    		city=json_array.getString("name");
    		JSONObject newJson=json_array.getJSONObject("main");
    		temp=newJson.getInt("temp")-272;
    		humid=newJson.getInt("humidity");	    			    			            		                                       		    		
    	}	    		    
    }
    void parseData5(String data) throws JSONException {    	
    	JSONObject json_array=new JSONObject(data);    	
    	for(int i=0; i<json_array.length();i++){    		
    		JSONObject jsonCity=json_array.getJSONObject("city");    		
    		city=jsonCity.getString("name");    		
    		JSONArray jArray=json_array.getJSONArray("list");    		
    		for(int j=0;j<jArray.length();j++){    			
    			JSONObject newJson=jArray.getJSONObject(j);
    			JSONObject newJson1=newJson.getJSONObject("temp");
        		temp5.add(newJson1.getInt("day"));        		
        		humid5.add(newJson.getInt("humidity"));
    		}    		    			    			    			            		                                       		    	
    	}	    		    
    }
    void parseDataGeo(String data) throws JSONException {    	
    	JSONObject json_array=new JSONObject(data);    	
    	for(int i=0; i<json_array.length();i++){    		
    		JSONObject jsonCity=json_array.getJSONObject("city");    		
    		city=jsonCity.getString("name");    		
    		JSONArray jArray=json_array.getJSONArray("list");    		
    		for(int j=0;j<jArray.length();j++){    			
    			JSONObject newJson=jArray.getJSONObject(j);
    			JSONObject newJson1=newJson.getJSONObject("temp");
        		temp5.add(newJson1.getInt("day")-272);        		
        		humid5.add(newJson.getInt("humidity"));
    		}    		   			    			    			            		                                       		    		
    	}	    		    
    }
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (data == null) {return;}
        name = data.getStringExtra("name");
        new RequestTask().execute("http://api.openweathermap.org/data/2.5/weather?q="+name);
      }
}

